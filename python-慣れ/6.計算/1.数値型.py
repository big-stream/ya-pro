#!/usr/bin/env python3
#
# ©  2018 やっプロ!製作委員会 cc by-sa 4.0

# python-慣れ/6.計算/1.数値型.py


説明 = """
Enterキーでスクリプトを進めよう!
"""
input(説明)



#-------------------------------------------------
説明 = """
# データには種類がある(データ型)

- 文字列型: 文字の処理で使う
- 数値型: 計算で使う

print('1 + 1')とprint(1 + 1)の違い:
"""
input(説明)


# 文字列型
print('1 + 1')

# 数値型
print(1 + 1)



#-------------------------------------------------
input()
説明 = """
# 文字列型と数値型の違い
"""
input(説明)


# 数値型
y = 2
print(y * 3) # 掛け算

# 文字列型
x = '2'
print(x * 3) # 文字列を3回連ねる処理
print('もじ' * 3)



#-------------------------------------------------
input()
説明 = """
# 数値型も種類がある

- 整数型
- 小数型
"""
input(説明)


# 整数型
x = 10
x = -123
print(x)

# 小数型
y = 100.0
y = -1.23
y = 0.1
print(y)



#-------------------------------------------------
input()
説明 = """
# 小数型の誤差に注意

小数型は下記に違いがある可能性

- 画面上に表示の小数
- コンピュータ内部で記録している数値
"""
input(説明)

# 足して0.3と思いきや
x = 0.1 + 0.2
print(x)

# 画面上は0.3だけど
y = 0.3
print(y)

# 小数型の落とし穴
print(x == y) # False

# ここで、yも本当は0.3ではないことに注意



#-------------------------------------------------
input()
説明 = """
# コンピュータは2進数で計算

- 無限小数は小数点では表現しきれない
- 10進数で有限小数でも、2進数では無限小数の可能性

無限小数: 0.333...などと無限に続く小数

例えば10進数の「0.1」は、2進数では無限(循環)小数になるので、
内部では有限の桁数で止めた(丸めた)近似値が記録されている。
"""
input(説明)

# 見た目は0.1でも、内部では0.1ではない
x = 0.1

# format()で実際の数値を確認できる
a = format(x, '.60') # 小数点以下60桁まであれば表示
print(a)

print(format(0.2, '.60'))
print(format(0.3, '.60'))
print(format(0.4, '.60'))

print(format(0.5, '.60')) # 2進数でも有限小数



#-------------------------------------------------
input()
説明 = """
# 数値型のポイント

- 小数型は誤差の可能性
- 整数型は誤差がないから、安心
- でも、小数型への自動変換があるよ
"""
input(説明)


# 整数型から小数型への自動変換
print(100 / 2)

# //を使うと整数型のまま
print(99 // 2) # 49

# でも計算前から小数型があると、//使っても結果は小数型
print(100.0 // 2)

